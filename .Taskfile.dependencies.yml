# https://taskfile.dev
version: "3"

tasks:
  nix:
    cmds:
      - cmd: curl -fsSL https://install.determinate.systems/nix | sh -s -- install --determinate
    interactive: true
    preconditions:
      - sh: command -v curl &>/dev/null
        msg: requires `curl` to be installed
    defer:
      - task: nix:shim
        silent: true
    status:
      - test -e /nix

  nix:shim:
    cmds:
      - cmd: |
          if [ -x ~/.nix-profile/bin/nix ]; then
            ln -vfs ~/.nix-profile/bin/nix ~/.local/bin/nix
          elif [ -x /nix/var/nix/profiles/default/bin/nix ]; then
            ln -vfs /nix/var/nix/profiles/default/bin/nix ~/.local/bin/nix
          else
            printf 'Nix is not installed\n' >&2
            exit 1
          fi
    status:
      - test -e ~/.local/bin/nix
    silent: true
    run: once

  zsh:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#zsh
      - cmd: ln -fs ~/.nix-profile/bin/zsh ~/.local/bin/zsh
    status:
      - test -x ~/.nix-profile/bin/zsh
      - test -x ~/.local/bin/zsh

  zplug:
    deps:
      - git
      - zsh
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          git clone https://github.com/zplug/zplug.git ~/.zplug
    status:
      - test -e ~/.zplug/

  direnv:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#direnv
    status:
      - test -x ~/.nix-profile/bin/direnv

  curl:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#curl
      - cmd: ln -fs ~/.nix-profile/bin/curl ~/.local/bin/curl
    status:
      - test -x ~/.nix-profile/bin/curl
      - test -x ~/.local/bin/curl

  unzip:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#unzip
      - cmd: ln -fs ~/.nix-profile/bin/unzip ~/.local/bin/unzip
    status:
      - test -x ~/.nix-profile/bin/unzip
      - test -x ~/.local/bin/unzip

  terraform:
    requires:
      vars:
        - terraform_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./terraform.zip 'https://releases.hashicorp.com/terraform/{{ .terraform_version }}/terraform_{{ .terraform_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./terraform.zip
          install -m0755 ./terraform ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/terraform
      - ~/.local/bin/terraform -version | grep -qFe '{{ .terraform_version }}'

  vault:
    requires:
      vars:
        - vault_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./vault.zip 'https://releases.hashicorp.com/vault/{{ .vault_version }}/vault_{{ .vault_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./vault.zip
          install -m0755 ./vault ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/vault
      - ~/.local/bin/vault -version | grep -qFe '{{ .vault_version }}'

  packer:
    requires:
      vars:
        - packer_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./packer.zip 'https://releases.hashicorp.com/packer/{{ .packer_version }}/packer_{{ .packer_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./packer.zip
          install -m0755 ./packer ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/packer
      - ~/.local/bin/packer -version | grep -qFe '{{ .packer_version }}'

  nomad:
    requires:
      vars:
        - nomad_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./nomad.zip 'https://releases.hashicorp.com/nomad/{{ .nomad_version }}/nomad_{{ .nomad_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./nomad.zip
          install -m0755 ./nomad ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/nomad
      - ~/.local/bin/nomad -version | grep -qFe '{{ .nomad_version }}'

  nomad:pack:
    requires:
      vars:
        - nomadpack_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./nomadpack.zip 'https://releases.hashicorp.com/nomad-pack/{{ .nomadpack_version }}/nomad-pack_{{ .nomadpack_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./nomadpack.zip
          install -m0755 ./nomad-pack ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/nomad-pack
      - ~/.local/bin/nomad-pack -version | grep -qFe '{{ .nomadpack_version }}'

  consul:
    requires:
      vars:
        - consul_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./consul.zip 'https://releases.hashicorp.com/consul/{{ .consul_version }}/consul_{{ .consul_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./consul.zip
          install -m0755 ./consul ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/consul
      - ~/.local/bin/consul -version | grep -qFe '{{ .consul_version }}'

  waypoint:
    requires:
      vars:
        - waypoint_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./waypoint.zip 'https://releases.hashicorp.com/waypoint/{{ .waypoint_version }}/waypoint_{{ .waypoint_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./waypoint.zip
          install -m0755 ./waypoint ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/waypoint
      - ~/.local/bin/waypoint -version | grep -qFe '{{ .waypoint_version }}'

  boundary:
    requires:
      vars:
        - boundary_version
    deps:
      - curl
      - unzip
    cmds:
      - cmd: |
          export PATH="${HOME}/.local/bin:${PATH}"
          tempdir="$(mktemp -d)"
          trap 'rm -rf "$tempdir"' EXIT
          pushd "$tempdir" &>/dev/null
          curl -SsLo ./boundary.zip 'https://releases.hashicorp.com/boundary/{{ .boundary_version }}/boundary_{{ .boundary_version }}_{{ OS }}_{{ ARCH }}.zip'
          unzip ./boundary.zip
          install -m0755 ./boundary ~/.local/bin
          popd &>/dev/null
    status:
      - test -x ~/.local/bin/boundary
      - ~/.local/bin/boundary -version | grep -qFe '{{ .boundary_version }}'

  neovim:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#neovim
      - cmd: ln -vfs ~/.nix-profile/bin/nvim ~/.local/bin/nvim
    defer:
      - task: neovim:shim
        silent: true
    status:
      - test -x ~/.nix-profile/bin/nvim
      - test -x ~/.local/bin/nvim

  neovim:shim:
    cmds:
      - task: neovim:shim:vim
      - task: neovim:shim:vi

  neovim:shim:vim:
    run: once
    cmds:
      - cmd: ln -vfs ~/.nix-profile/bin/nvim ~/.local/bin/vim
    status:
      - test -x ~/.local/bin/vim

  neovim:shim:vi:
    run: once
    cmds:
      - cmd: ln -vfs ~/.nix-profile/bin/nvim ~/.local/bin/vi
    status:
      - test -x ~/.local/bin/vi

  starship:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#starship
    status:
      - test -x ~/.nix-profile/bin/starship

  ghq:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#ghq
      - cmd: ln -fs ~/.nix-profile/bin/ghq ~/.local/bin/ghq
    status:
      - test -x ~/.nix-profile/bin/ghq
      - test -x ~/.local/bin/ghq

  git:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#git
      - cmd: ln -fs ~/.nix-profile/bin/git ~/.local/bin/git
      - cmd: ln -vfs '{{ .TASKFILE_DIR }}/exe/g' ~/.local/bin/g
    status:
      - test -x ~/.nix-profile/bin/git
      - test -x ~/.local/bin/git
      - test -x ~/.local/bin/g

  tmux:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#tmux
      - cmd: ln -fs ~/.nix-profile/bin/tmux ~/.local/bin/tmux
      - cmd: ln -vfs '{{ .TASKFILE_DIR }}/exe/tat' ~/.local/bin/tat
    status:
      - test -x ~/.nix-profile/bin/tmux
      - test -x ~/.local/bin/tmux
      - test -x ~/.local/bin/tat

  fzf:
    deps:
      - nix:shim
    cmds:
      - cmd: ~/.local/bin/nix profile install nixpkgs#fzf
      - cmd: ln -fs ~/.nix-profile/bin/fzf ~/.local/bin/fzf
    status:
      - test -x ~/.nix-profile/bin/fzf
      - test -x ~/.local/bin/fzf
